version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-aerocrm_db}
      POSTGRES_USER: ${DB_USER:-aerocrm_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aerocrm_password}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             gunicorn aerocrm_project.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env.example # Use .env in production after filling it
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_worker:
    build: .
    command: celery -A aerocrm_project worker -l INFO
    volumes:
      - .:/app
    env_file:
      - .env.example
    depends_on:
      redis:
        condition: service_healthy
      backend: # Worker might need access to models after migration
        condition: service_started

  celery_beat:
    build: .
    command: celery -A aerocrm_project beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - .env.example
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules # Avoid overriding node_modules with local potentially incompatible ones
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - CHOKIDAR_USEPOLLING=true # Helps with Docker volume hot-reloading
    depends_on:
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume:



